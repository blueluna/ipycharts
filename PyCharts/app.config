<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <configSections>
        <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="PyCharts.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <userSettings>
        <PyCharts.Properties.Settings>
            <setting name="WindowSize" serializeAs="String">
                <value>800, 600</value>
            </setting>
            <setting name="WindowPosition" serializeAs="String">
                <value>0, 0</value>
            </setting>
            <setting name="WindowState" serializeAs="String">
                <value>Normal</value>
            </setting>
            <setting name="Code" serializeAs="String">
                <value>
# -*- coding: utf-8 -*-
# Embedded IronPython Script
# When invoked the object chart exists, Which is the MSChart control seen to the right
 
import clr
from System import Math
from System import DateTime
from System.IO import TextReader
clr.AddReference("System.Windows.Forms.DataVisualization")
from System.Windows.Forms.DataVisualization.Charting import SeriesChartType, MarkerStyle
clr.AddReference("System.Drawing")
from System.Drawing import Color

class Factory(object):
	"""
	Factory will be instantiated from C#
	"""

	def __init__(self):
		"""
		Initialize the object
		"""
		self._p = 0.0
		series = chart.Series[0]
		area = chart.ChartAreas[0]
		series.ChartType = SeriesChartType.FastPoint
		series.MarkerStyle = MarkerStyle.Circle
		series.MarkerSize = 4
		series.MarkerBorderColor = Color.Navy
		series.MarkerColor = Color.White
		series.BorderWidth = 1
		series.MarkerBorderWidth = 1
		area.AxisY.Minimum = 0.5
		area.AxisY.Maximum = 1.5

	def sampleCount(self):
		return 800

	def calculate(self, t, xs, ys):
		"""
		calculate will be executed for each update of the graph.
		 - t is the time, increased for each run
		 - xs are the x values
		 - ys are the y values
		"""
		d = 360.0/len(xs)
		x = 0.0
		for i in xrange(len(xs)):
			xs[i] = x
			ys[i] = 1.0 + 0.25 * Math.Sin(x*0.04*Math.PI+self._p) + 0.25 * Math.Sin(x*0.1*Math.PI-self._p)
			x += d
		self._p += 0.1
</value>
            </setting>
        </PyCharts.Properties.Settings>
    </userSettings>
</configuration>